#!/usr/bin/env bash
# This script was generated by bashly 1.0.0 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
rrdcap_usage() {
  if [[ -n $long_usage ]]; then
    printf "rrdcap - A tool to monitor packet capture (pcap) files using RRD\n"
    echo

  else
    printf "rrdcap - A tool to monitor packet capture (pcap) files using RRD\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  rrdcap COMMAND\n"
  printf "  rrdcap [COMMAND] --help | -h\n"
  printf "  rrdcap --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Initialize an RRD file\n" "init    "
  printf "  %s   Generate an RRD file from a pcap capture\n" "generate"
  printf "  %s   Export a PNG graph from the RRD file\n" "export  "
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
rrdcap_init_usage() {
  if [[ -n $long_usage ]]; then
    printf "rrdcap init - Initialize an RRD file\n"
    echo

  else
    printf "rrdcap init - Initialize an RRD file\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  rrdcap init [OPTIONS]\n"
  printf "  rrdcap init --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--config, -c CONFIGFILE"
    printf "    RRD config file\n"
    echo

    # :flag.usage
    printf "  %s\n" "--output, -o OUTPUTFILE (required)"
    printf "    Output RRD binary file\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  RRDcap init -c rrd.config -o capture.rrd\n"
    echo

  fi
}

# :command.usage
rrdcap_generate_usage() {
  if [[ -n $long_usage ]]; then
    printf "rrdcap generate - Generate an RRD file from a pcap capture\n"
    echo

  else
    printf "rrdcap generate - Generate an RRD file from a pcap capture\n"
    echo

  fi

  printf "Alias: gen\n"
  echo

  printf "%s\n" "Usage:"
  printf "  rrdcap generate [OPTIONS]\n"
  printf "  rrdcap generate --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--config, -c CONFIGFILE"
    printf "    RRD config file\n"
    echo

    # :flag.usage
    printf "  %s\n" "--pcap, -r PCAPFILE (required)"
    printf "    Pcap file\n"
    echo

    # :flag.usage
    printf "  %s\n" "--output, -o OUTPUTFILE (required)"
    printf "    Output RRD binary file\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  RRDcap generate -c rrd.config -r capture.pcap\n"
    echo

  fi
}

# :command.usage
rrdcap_export_usage() {
  if [[ -n $long_usage ]]; then
    printf "rrdcap export - Export a PNG graph from the RRD file\n"
    echo

  else
    printf "rrdcap export - Export a PNG graph from the RRD file\n"
    echo

  fi

  printf "Alias: exp\n"
  echo

  printf "%s\n" "Usage:"
  printf "  rrdcap export [OPTIONS]\n"
  printf "  rrdcap export --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--config, -c CONFIGFILE"
    printf "    RRD config file\n"
    echo

    # :flag.usage
    printf "  %s\n" "--rrd, -f RRDFILE (required)"
    printf "    Capture RRD file\n"
    echo

    # :flag.usage
    printf "  %s\n" "--output, -o OUTPUTFILE (required)"
    printf "    Output PNG file to store the RRD graph\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  RRDcap export -f capture.rrd -o capture.png\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
  if ((${#args[@]})); then
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi
}

# :command.user_lib
# src/lib/config.sh
config_init() {
  CONFIG_FILE=${CONFIG_FILE:=config.ini}
  [[ -f "$CONFIG_FILE" ]] || touch "$CONFIG_FILE"
}

config_get() {
  local key=$1
  local regex="^$key *= *(.+)$"
  local value=""

  config_init

  while IFS= read -r line || [ -n "$line" ]; do
    if [[ $line =~ $regex ]]; then
      value="${BASH_REMATCH[1]}"
      break
    fi
  done <"$CONFIG_FILE"

  echo "$value"
}

config_set() {
  local key=$1
  shift
  local value="$*"

  config_init

  local regex="^($key) *= *.+$"
  local output=""
  local found_key=""
  local newline

  while IFS= read -r line || [ -n "$line" ]; do
    newline=$line
    if [[ $line =~ $regex ]]; then
      found_key="${BASH_REMATCH[1]}"
      newline="$key = $value"
      output="$output$newline\n"
    elif [[ $line ]]; then
      output="$output$line\n"
    fi
  done <"$CONFIG_FILE"

  if [[ -z $found_key ]]; then
    output="$output$key = $value\n"
  fi

  printf "%b\n" "$output" >"$CONFIG_FILE"
}

config_del() {
  local key=$1

  local regex="^($key) *="
  local output=""

  config_init

  while IFS= read -r line || [ -n "$line" ]; do
    if [[ $line ]] && [[ ! $line =~ $regex ]]; then
      output="$output$line\n"
    fi
  done <"$CONFIG_FILE"

  printf "%b\n" "$output" >"$CONFIG_FILE"
}

config_show() {
  config_init
  cat "$CONFIG_FILE"
}

config_keys() {
  local regex="^([a-zA-Z0-9_\-\/\.]+) *="

  config_init

  local keys=()
  local key

  while IFS= read -r line || [ -n "$line" ]; do
    if [[ $line =~ $regex ]]; then
      key="${BASH_REMATCH[1]}"
      keys+=("$key")
    fi
  done <"$CONFIG_FILE"
  echo "${keys[@]}"
}

config_has_key() {
  [[ $(config_get "$1") ]]
}

# src/lib/validations/validate_dir_exists.sh
validate_dir_exists() {
  [[ -d "$1" ]] || echo "must be an existing directory"
}

# src/lib/validations/validate_file_exists.sh
validate_file_exists() {
  [[ -f "$1" ]] || echo "must be an existing file"
}

# src/lib/validations/validate_integer.sh
validate_integer() {
  [[ "$1" =~ ^[0-9]+$ ]] || echo "must be an integer"
}

# src/lib/validations/validate_not_empty.sh
validate_not_empty() {
  [[ -z "$1" ]] && echo "must not be empty"
}

# :command.command_functions
# :command.function
rrdcap_init_command() {
  # src/init_command.sh
  # This tool is part of the Stratosphere Laboratory, AIC, FEL, CTU in Prague
  # Contact: stratosphere@aic.fel.cvut.cz

  CONFIG_FILE=${args[--config]}
  OUTPUT_FILE=${args[--output]}

  # Get RRD parameters from config file
  rrd_step=$(config_get "STEP")
  rrd_format=$(config_get "RRD_FORMAT")

  echo "[+] Creating RRD file $OUTPUT_FILE"

  rrdtool create "$OUTPUT_FILE" --step "$rrd_step" $rrd_format

  echo "[+] Saved RRD file $OUTPUT_FILE"

}

# :command.function
rrdcap_generate_command() {
  # src/generate_command.sh
  # This tool is part of the Stratosphere Laboratory, AIC, FEL, CTU in Prague
  # Contact: stratosphere@aic.fel.cvut.cz
  :

}

# :command.function
rrdcap_export_command() {
  # src/export_command.sh
  # This tool is part of the Stratosphere Laboratory, AIC, FEL, CTU in Prague
  # Contact: stratosphere@aic.fel.cvut.cz

  RRD_FILE=${args[--rrd]}
  OUTPUT_FILE=${args[--output]}

  # Get RRD parameters from config file
  rrd_width=$(config_get "RRD_WIDTH")
  rrd_height=$(config_get "RRD_HEIGHT")
  rrd_img_format=$(config_get "RRD_IMGFORMAT")
  rrd_start=$(config_get "RRD_START")
  rrd_end=$(config_get "RRD_END")
  rrd_graph=$(config_get "RRD_GRAPH")

  rrd_graph=$(echo "$rrd_graph" | awk -v repl="$RRD_FILE" '{gsub(/RRDFILENAME/,repl)}1')

  echo "[+] Creating RRD graph: $OUTPUT_FILE"

  rrdtool graph "$OUTPUT_FILE" -w "$rrd_width" -h "$rrd_height" \
      --imgformat "$rrd_img_format" --start "$rrd_start" \
      --end "$rrd_end" $rrd_graph 1>/dev/null

  if $( validate_file_exists "$OUTPUT_FILE" );
  then
      echo "[+] Saved RRD graph: $OUTPUT_FILE"
  fi

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        rrdcap_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    init)
      action="init"
      shift
      rrdcap_init_parse_requirements "$@"
      shift $#
      ;;

    generate | gen)
      action="generate"
      shift
      rrdcap_generate_parse_requirements "$@"
      shift $#
      ;;

    export | exp)
      action="export"
      shift
      rrdcap_export_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      rrdcap_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
rrdcap_init_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        rrdcap_init_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  if ! command -v rrdtool >/dev/null 2>&1; then
    printf "missing dependency: rrdtool\n" >&2
    printf "%s\n" "sudo apt install -y rrdtool" >&2
    exit 1
  fi

  # :command.command_filter
  action="init"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --config | -c)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          # :flag.validations
          if [[ -n $(validate_file_exists "$2") ]]; then
            printf "validation error in %s:\n%s\n" "--config, -c CONFIGFILE" "$(validate_file_exists "$2")" >&2
            exit 1
          fi

          args['--config']="$2"
          shift
          shift
        else
          printf "%s\n" "--config requires an argument: --config, -c CONFIGFILE" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --output | -o)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--output']="$2"
          shift
          shift
        else
          printf "%s\n" "--output requires an argument: --output, -o OUTPUTFILE" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

  # :command.required_flags_filter
  if [[ -z ${args['--output']+x} ]]; then
    printf "missing required flag: --output, -o OUTPUTFILE\n" >&2
    exit 1
  fi

}

# :command.parse_requirements
rrdcap_generate_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        rrdcap_generate_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  if ! command -v rrdtool >/dev/null 2>&1; then
    printf "missing dependency: rrdtool\n" >&2
    printf "%s\n" "sudo apt install -y rrdtool" >&2
    exit 1
  fi

  # :command.command_filter
  action="generate"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --config | -c)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          # :flag.validations
          if [[ -n $(validate_file_exists "$2") ]]; then
            printf "validation error in %s:\n%s\n" "--config, -c CONFIGFILE" "$(validate_file_exists "$2")" >&2
            exit 1
          fi

          args['--config']="$2"
          shift
          shift
        else
          printf "%s\n" "--config requires an argument: --config, -c CONFIGFILE" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --pcap | -r)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          # :flag.validations
          if [[ -n $(validate_file_exists "$2") ]]; then
            printf "validation error in %s:\n%s\n" "--pcap, -r PCAPFILE" "$(validate_file_exists "$2")" >&2
            exit 1
          fi

          args['--pcap']="$2"
          shift
          shift
        else
          printf "%s\n" "--pcap requires an argument: --pcap, -r PCAPFILE" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --output | -o)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--output']="$2"
          shift
          shift
        else
          printf "%s\n" "--output requires an argument: --output, -o OUTPUTFILE" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

  # :command.required_flags_filter
  if [[ -z ${args['--pcap']+x} ]]; then
    printf "missing required flag: --pcap, -r PCAPFILE\n" >&2
    exit 1
  fi
  if [[ -z ${args['--output']+x} ]]; then
    printf "missing required flag: --output, -o OUTPUTFILE\n" >&2
    exit 1
  fi

}

# :command.parse_requirements
rrdcap_export_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        rrdcap_export_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  if ! command -v rrdtool >/dev/null 2>&1; then
    printf "missing dependency: rrdtool\n" >&2
    printf "%s\n" "sudo apt install -y rrdtool" >&2
    exit 1
  fi

  # :command.command_filter
  action="export"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --config | -c)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          # :flag.validations
          if [[ -n $(validate_file_exists "$2") ]]; then
            printf "validation error in %s:\n%s\n" "--config, -c CONFIGFILE" "$(validate_file_exists "$2")" >&2
            exit 1
          fi

          args['--config']="$2"
          shift
          shift
        else
          printf "%s\n" "--config requires an argument: --config, -c CONFIGFILE" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --rrd | -f)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          # :flag.validations
          if [[ -n $(validate_file_exists "$2") ]]; then
            printf "validation error in %s:\n%s\n" "--rrd, -f RRDFILE" "$(validate_file_exists "$2")" >&2
            exit 1
          fi

          args['--rrd']="$2"
          shift
          shift
        else
          printf "%s\n" "--rrd requires an argument: --rrd, -f RRDFILE" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --output | -o)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--output']="$2"
          shift
          shift
        else
          printf "%s\n" "--output requires an argument: --output, -o OUTPUTFILE" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

  # :command.required_flags_filter
  if [[ -z ${args['--rrd']+x} ]]; then
    printf "missing required flag: --rrd, -f RRDFILE\n" >&2
    exit 1
  fi
  if [[ -z ${args['--output']+x} ]]; then
    printf "missing required flag: --output, -o OUTPUTFILE\n" >&2
    exit 1
  fi

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

  # src/initialize.sh

}

# :command.run
run() {
  declare -A args=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "init")
      if [[ ${args['--help']:-} ]]; then
        long_usage=yes
        rrdcap_init_usage
      else
        rrdcap_init_command
      fi
      ;;

    "generate")
      if [[ ${args['--help']:-} ]]; then
        long_usage=yes
        rrdcap_generate_usage
      else
        rrdcap_generate_command
      fi
      ;;

    "export")
      if [[ ${args['--help']:-} ]]; then
        long_usage=yes
        rrdcap_export_usage
      else
        rrdcap_export_command
      fi
      ;;

  esac
}

initialize
run "$@"
